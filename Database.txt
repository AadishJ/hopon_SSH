CREATE TABLE bus_stops (
    stop_id VARCHAR(50) PRIMARY KEY,
    stop_name VARCHAR(100) NOT NULL,
    latitude DECIMAL(10, 8) NOT NULL,
    longitude DECIMAL(11, 8) NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create Bus Routes table
CREATE TABLE bus_routes (
    route_id VARCHAR(50) PRIMARY KEY,
    route_name VARCHAR(100) NOT NULL,
    source VARCHAR(50) NOT NULL REFERENCES bus_stops(stop_id),
    destination VARCHAR(50) NOT NULL REFERENCES bus_stops(stop_id),
    stop_sequence TEXT[] NOT NULL, -- Array of stop IDs
    distance DECIMAL(8, 2) NOT NULL, -- in km
    estimated_time INTEGER NOT NULL, -- in minutes
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create Buses table
CREATE TABLE buses (
    bus_id VARCHAR(50) PRIMARY KEY,
    bus_name VARCHAR(100) NOT NULL,
    route_id VARCHAR(50) NOT NULL REFERENCES bus_routes(route_id),
    avg_speed DECIMAL(5, 2) NOT NULL, -- km/h
    current_latitude DECIMAL(10, 8),
    current_longitude DECIMAL(11, 8),
    is_active BOOLEAN DEFAULT true,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create Drivers table
CREATE TABLE drivers (
    driver_id VARCHAR(50) PRIMARY KEY,
    driver_name VARCHAR(100) NOT NULL,
    driver_password VARCHAR(255) NOT NULL, -- Should be hashed
    bus_id VARCHAR(50) NOT NULL REFERENCES buses(bus_id),
    is_on_duty BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create Bus Locations table (for real-time tracking history)
CREATE TABLE bus_locations (
    id BIGSERIAL PRIMARY KEY,
    bus_id VARCHAR(50) NOT NULL REFERENCES buses(bus_id),
    latitude DECIMAL(10, 8) NOT NULL,
    longitude DECIMAL(11, 8) NOT NULL,
    speed DECIMAL(5, 2) NOT NULL,
    heading DECIMAL(5, 2), -- direction in degrees
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_buses_route_id ON buses(route_id);
CREATE INDEX idx_drivers_bus_id ON drivers(bus_id);
CREATE INDEX idx_bus_locations_bus_id ON bus_locations(bus_id);
CREATE INDEX idx_bus_locations_timestamp ON bus_locations(timestamp);
CREATE INDEX idx_bus_routes_source ON bus_routes(source);
CREATE INDEX idx_bus_routes_destination ON bus_routes(destination);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add triggers for updated_at
CREATE TRIGGER update_bus_stops_updated_at BEFORE UPDATE ON bus_stops FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_bus_routes_updated_at BEFORE UPDATE ON bus_routes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_drivers_updated_at BEFORE UPDATE ON drivers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security (RLS)
ALTER TABLE bus_stops ENABLE ROW LEVEL SECURITY;
ALTER TABLE bus_routes ENABLE ROW LEVEL SECURITY;
ALTER TABLE buses ENABLE ROW LEVEL SECURITY;
ALTER TABLE drivers ENABLE ROW LEVEL SECURITY;
ALTER TABLE bus_locations ENABLE ROW LEVEL SECURITY;

-- Create policies for public read access (adjust as needed)
CREATE POLICY "Allow public read access on bus_stops" ON bus_stops FOR SELECT USING (true);
CREATE POLICY "Allow public read access on bus_routes" ON bus_routes FOR SELECT USING (true);
CREATE POLICY "Allow public read access on buses" ON buses FOR SELECT USING (true);
CREATE POLICY "Allow public read access on bus_locations" ON bus_locations FOR SELECT USING (true);

-- Create policies for authenticated users (drivers/admin)
CREATE POLICY "Allow authenticated users to update buses" ON buses FOR UPDATE USING (auth.role() = 'authenticated');
CREATE POLICY "Allow authenticated users to insert bus_locations" ON bus_locations FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Allow drivers to update their own info" ON drivers FOR UPDATE USING (auth.uid()::text = driver_id);